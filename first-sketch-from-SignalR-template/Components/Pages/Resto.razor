@page "/Resto"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client
@using BlazorSignalRApp.Modules
@inject NavigationManager Navigation
@implements IAsyncDisposable

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>

<h3>Menú del Restaurante 1</h3>

@if (RestaurantRepository.getMenuOfARestaurant(1).Count > 0)
{
    <ul class="list-group">
        @foreach (var item in RestaurantRepository.getMenuOfARestaurant(1))
        {
            <li class="list-group-item d-flex justify-content-between align-items-center">
                <span>@item.Item1</span>
                <span class="badge bg-primary rounded-pill">
                    @item.Item2.ToString("C0", new System.Globalization.CultureInfo("es-AR"))
                </span>
                <button class="btn btn-danger btn-sm ms-2" @onclick="@(() => EliminarItem(item))" disabled="@(!IsConnected)">Eliminar</button>
            </li>
        }
    </ul>
}
else
{
    <p>No hay ítems disponibles en el menú.</p>
}

<hr />

<!-- Inputs para agregar un nuevo ítem -->
<div class="row g-3 align-items-center mb-3">
    <div class="col-auto">
        <input type="text" class="form-control" placeholder="Nombre" @bind="name" required />
    </div>
    <div class="col-auto">
        <input type="number" class="form-control" placeholder="Precio" @bind="price" required />
    </div>
    <div class="col-auto">
        <button class="btn btn-primary" @onclick="AgregarItem" disabled="@(!IsConnected)">Agregar</button>
    </div>
</div>

<button class="btn btn-secondary mt-3" @onclick="Create" disabled="@(!IsConnected)">Nuevo Resto</button>

@code {
    private string? name;
    private int? price;
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user} | {message} | {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss}";
            Console.WriteLine(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }


    private async Task AgregarItem()
    {
        if (!string.IsNullOrWhiteSpace(name) && price.HasValue)
        {
            Console.WriteLine($"Agregando ítem: {name}, Precio: {price}");

            await hubConnection.SendAsync("AddMenuItem", 1, price, name);

            name = "";
            price = 0;

            StateHasChanged();
        }
    }

    private async Task EliminarItem(Tuple<string, int> item)
    {
        string itemName = item.Item1;
        int itemPrice = item.Item2;
        Console.WriteLine($"Eliminando ítem: {itemName}, Precio: {itemPrice}");
        await hubConnection.SendAsync("DeleteMenuItem", 1, itemPrice, itemName);
        StateHasChanged();
    }

    private async Task Create()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("CreateResto", 2);
        }
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}




@* @page "/Resto"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client
@using BlazorSignalRApp.Modules
@inject NavigationManager Navigation
@implements IAsyncDisposable
<link href="styles.css" rel="stylesheet">
<link href="//maxcdn.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css" rel="stylesheet" id="bootstrap-css">

<script src="//maxcdn.bootstrapcdn.com/bootstrap/4.1.1/js/bootstrap.min.js"></script>
<script src="//cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>


<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>

<h3>Menú del Restaurante 1</h3>

@if (0 != RestaurantRepository.getMenuOfARestaurant(1).Count)
{
    <ul class="list-group">
        @foreach (var item in RestaurantRepository.getMenuOfARestaurant(1))
        {
            <li class="list-group-item d-flex justify-content-between align-items-center">
                <span>@item.Item1</span>
                <span class="badge bg-primary rounded-pill">
                    @item.Item2.ToString("C0", new System.Globalization.CultureInfo("es-AR"))
                </span>
            </li>
        }
    </ul>
}
else
{
    <p>No hay ítems disponibles en el menú.</p>
}

<hr />

<div class="contact-form row">
    <div class="form-field col-lg-12">
        <label for="nombre">Nombre</label>
        <input id="name" class="input-text js-input" type="text" @bind="name" required>
    </div>

    <div class="form-field col-lg-12">
        <label for="precio">Precio</label>
        <input id="message" class="input-text js-input" type="text" @bind="price" required>
    </div>
    <div class="form-field col-lg-12">
        <button class='submit-btn' @onclick="AgregarItem" disabled="@(!IsConnected)">Agregar</button>
    </div>
</div>



@foreach (var res in RestaurantRepository.restaurants)
{
    <div class="form-field col-lg-12">
        @res.GetHashCode();
    </div>
}

<button class='submit-btn' @onclick="Create" disabled="@(!IsConnected)">NuevoResto</button>



@code {
    private List<Tuple<string, int>> menuItems;
    private MenuItem newItem = new MenuItem();
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? name;
    private int? price;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            DateTime currentUtcDateTime = DateTime.UtcNow;
            string formattedDateTime = currentUtcDateTime.ToString("yyyy-MM-dd HH:mm:ss");
            var encodedMsg = $"{user} | {message} | {formattedDateTime}"; // Add spaces around pipes
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });



        await hubConnection.StartAsync();
    }

    private async Task AgregarItem()
    {
        Console.WriteLine($"Agregando item: {name}, Precio: {price}");

        // Log para ver si estamos aquí
        Console.WriteLine("Valores válidos, enviando al Hub...");

        await hubConnection.SendAsync("AddMenuItem", 1, price, name);
        price = 0;
        name = "";

    }
    private async Task Create()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("CreateResto", 2);
        }
    }

    private async Task AddMenuItem()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("AddMenuItem", 1, newItem.Price,newItem.Name);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    protected override void OnInitialized()
    {
        CargarMenu();
    }

    private void CargarMenu()
    {
        menuItems = RestaurantRepository.getMenuOfARestaurant(1);
    }

} *@


