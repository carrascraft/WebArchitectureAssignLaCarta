@page "/Resto/{restoId}"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.SignalR.Client
@using BlazorSignalRApp.Modules
@inject NavigationManager Navigation
@implements IAsyncDisposable

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>

<h3>Menú del Restaurante @restoId</h3>

@if (RestaurantRepository.getMenuOfARestaurant(int.Parse(restoId)).Count > 0)
{
    <ul class="list-group">
        @foreach (var item in RestaurantRepository.getMenuOfARestaurant(int.Parse(restoId)))
        {
            <li class="list-group-item d-flex justify-content-between align-items-center">
                <span>@item.Item1</span>
                <span class="badge bg-primary rounded-pill">
                    @item.Item2.ToString("C0", new System.Globalization.CultureInfo("es-AR"))
                </span>
                <button class="btn btn-danger btn-sm ms-2" @onclick="@(() => EliminarItem(item))" disabled="@(!IsConnected)">Eliminar</button>
            </li>
        }
    </ul>
}
else
{
    <p>No hay ítems disponibles en el menú.</p>
}

<hr />

<!-- Inputs para agregar un nuevo ítem -->
<div class="row g-3 align-items-center mb-3">
    <div class="col-auto">
        <input type="text" class="form-control" placeholder="Nombre" @bind="name" required />
    </div>
    <div class="col-auto">
        <input type="number" class="form-control" placeholder="Precio" @bind="price" required />
    </div>
    <div class="col-auto">
        <button class="btn btn-primary" @onclick="AgregarItem" disabled="@(!IsConnected)">Agregar</button>
    </div>
</div>

<div class="container mt-4">
    <h3>Cantidad de Mesas</h3>

    <div class="d-flex align-items-center">
        <button class="btn btn-danger me-3"
                @onclick="DecrementarMesa"
                disabled="@(RestaurantRepository.getCountTableFromRestaurant(int.Parse(restoId)) <= 1)">
            -
        </button>

        <span>@RestaurantRepository.getCountTableFromRestaurant(int.Parse(restoId))</span>

        <button class="btn btn-success ms-3" @onclick="IncrementarMesa">+</button>
    </div>
</div>

@* <button class="btn btn-secondary mt-3" @onclick="Create" disabled="@(!IsConnected)">Nuevo Resto</button> *@

@code {
    private string? name;
    private int? price;
    int cantTables;
    private HubConnection? hubConnection;

    [Parameter]
     public required string restoId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user} | {message} | {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss}";
            Console.WriteLine(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }


    private async Task AgregarItem()
    {
        if (!string.IsNullOrWhiteSpace(name) && price.HasValue)
        {
            Console.WriteLine($"Agregando ítem: {name}, Precio: {price}");

            await hubConnection.SendAsync("AddMenuItem", int.Parse(restoId), price, name);

            name = "";
            price = 0;

            StateHasChanged();
        }
    }

    private async Task EliminarItem(Tuple<string, int> item)
    {
        string itemName = item.Item1;
        int itemPrice = item.Item2;
        Console.WriteLine($"Eliminando ítem: {itemName}, Precio: {itemPrice}");
        await hubConnection.SendAsync("DeleteMenuItem", int.Parse(restoId), itemPrice, itemName);
        StateHasChanged();
    }

    private async Task IncrementarMesa()
    {
        await hubConnection.SendAsync("AddTable", int.Parse(restoId));
    }


    private async Task DecrementarMesa()
    {
        await hubConnection.SendAsync("SubstractTable", int.Parse(restoId));
    }


    private async Task Create()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("CreateResto", 2);
        }
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}